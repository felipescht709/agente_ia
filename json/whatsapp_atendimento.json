{
  "name": "WhatsApp Atendimento Cl√≠nica",
  "active": true,
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "whatsapp-webhook",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-whatsapp",
      "name": "WhatsApp Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extrair dados da mensagem do WhatsApp\nconst body = $input.first().json.body;\n\n// Verifique a estrutura da mensagem do Venom-Bot ou da API do WhatsApp.\n// O corpo do Venom-Bot pode ser diferente da Meta API oficial.\n// Exemplo para Venom-Bot: body.data.from, body.data.body\n// Exemplo para Meta API (que √© a base do seu JSON): body.entry[0].changes[0].value.messages[0]\n\nlet phone;\nlet messageText;\nlet contactName = 'Paciente'; // Nome padr√£o caso n√£o encontre\n\n// Tentativa de extrair do formato Meta API (do JSON fornecido)\ntry {\n  const message = body.entry[0].changes[0].value.messages[0];\n  const contact = body.entry[0].changes[0].value.contacts[0];\n  phone = message.from;\n  messageText = message.text.body;\n  contactName = contact.profile.name;\n} catch (e) {\n  // Fallback para outros formatos, como o Venom-Bot pode enviar\n  console.log('Tentando formato alternativo para WhatsApp body:', body);\n  if (body.data && body.data.from && body.data.body) {\n    phone = body.data.from.split('@')[0]; // Remove o @c.us\n    messageText = body.data.body;\n    contactName = body.data.pushname || phone; // Usa pushname ou phone\n  } else {\n    throw new Error('Formato de mensagem WhatsApp n√£o reconhecido.');\n  }\n}\n\nreturn [\n  {\n    json: {\n      phone: phone,\n      name: contactName,\n      message_text: messageText,\n      message_id: message.id || 'N/A',\n      timestamp: message.timestamp || Date.now() / 1000\n    }\n  }\n];"
      },
      "id": "process-message",
      "name": "Processar Mensagem",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "model": "gpt-3.5-turbo",
        "messages": {
          "messageValues": [
            {
              "role": "system",
              "content": "Voc√™ √© um assistente virtual da Cl√≠nica {{ $env.CLINIC_NAME || 'Sua Cl√≠nica' }}. Suas fun√ß√µes s√£o:\\n1. Responder d√∫vidas sobre hor√°rios, procedimentos e localiza√ß√£o\\n2. Identificar se o paciente quer agendar consulta\\n3. Fornecer informa√ß√µes gerais sobre sa√∫de\\n4. Ser sempre educado e profissional\\n\\nRegras:\\n- N√£o forne√ßa diagn√≥sticos m√©dicos\\n- Sempre sugira consulta presencial para quest√µes de sa√∫de\\n- Seja claro e objetivo nas respostas\\n- Use linguagem acess√≠vel\\n- Se identificar claramente a inten√ß√£o de agendamento de consulta, responda *exatamente* com a palavra-chave: 'AGENDAR_CONSULTA'\\n- Se n√£o conseguir atender ou identificar a inten√ß√£o, responda com: 'DESVIAR_HUMANO'\\n\\nInforma√ß√µes da cl√≠nica:\\n- Hor√°rio: Segunda a Sexta, 8h √†s 18h\\n- Endere√ßo: [ENDERE√áO_CLINICA - EX: Rua das Rosas, 450, Centro, Chapec√≥, SC]\\n- Telefone: {{ $env.CLINIC_PHONE || '(XX) XXXXX-XXXX' }}"
            },
            {
              "role": "user",
              "content": "={{ $('Processar Mensagem').first().json.message_text }}"
            }
          ]
        },
        "options": {
          "temperature": 0.7,
          "maxTokens": 150
        },
        "llmModel": "chat",
        "openAiApiVersion": "v1"
      },
      "id": "chatgpt-analysis",
      "name": "ChatGPT An√°lise",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [680, 300],
      "credentials": {
        "openAiApi": {
          "id": "YOUR_OPENAI_CREDENTIAL_ID",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.choices[0].message.content }}",
              "rightValue": "AGENDAR_CONSULTA",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-intent-agendamento",
      "name": "Verificar Inten√ß√£o Agendamento",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "leftValue": "={{ $json.choices[0].message.content }}",
              "rightValue": "DESVIAR_HUMANO",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "check-intent-desviar-humano",
      "name": "Verificar Inten√ß√£o Desviar Humano",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [900, 400]
    },
    {
      "parameters": {
        "url": "=http://localhost:4000/api/agenda/disponibilidade",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.BACKEND_API_TOKEN }}"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "dataInicio",
              "value": "={{ new Date().toISOString().split('T')[0] }}"
            },
            {
              "name": "dataFim",
              "value": "={{ new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] }}"
            },
            {
              "name": "disponivelParaAgendamento",
              "value": "true"
            }
          ]
        },
        "options": {}
      },
      "id": "check-availability",
      "name": "Verificar Disponibilidade",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1120, 100],
      "credentials": {
        "httpHeaderAuth": {
          "id": "YOUR_BACKEND_API_AUTH_ID",
          "name": "Backend API Auth"
        }
      }
    },
    {
      "parameters": {
        "phoneNumberId": "={{ $env.WHATSAPP_PHONE_ID }}",
        "to": "={{ $('Processar Mensagem').first().json.phone }}",
        "message": "={{ $json.choices[0].message.content }}",
        "additionalFields": {}
      },
      "id": "send-general-response",
      "name": "Enviar Resposta Geral",
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [1120, 300],
      "credentials": {
        "whatsAppBusinessCloud": {
          "id": "YOUR_WHATSAPP_CREDENTIAL_ID",
          "name": "WhatsApp Business Cloud"
        }
      }
    },
    {
      "parameters": {
        "phoneNumberId": "={{ $env.WHATSAPP_PHONE_ID }}",
        "to": "={{ $('Processar Mensagem').first().json.phone }}",
        "message": "√ìtimo! Vou te ajudar a agendar sua consulta. Temos os seguintes hor√°rios dispon√≠veis:\\n\\n{{ $json.data.map(h => `üìÖ ${new Date(h.data).toLocaleDateString('pt-BR')} √†s ${h.hora_inicio.substring(0, 5)} - Dr(a). ${h.profissional_nome}`).join('\\n') || 'Nenhum hor√°rio dispon√≠vel no momento.' }}\\n\\nPara confirmar, por favor, me informe:\\n1Ô∏è‚É£ Qual hor√°rio prefere (Ex: 10:00)?\\n2Ô∏è‚É£ Com qual profissional (Ex: Dr. Jo√£o)?\\n3Ô∏è‚É£ Seu nome completo\\n4Ô∏è‚É£ Seu CPF (apenas n√∫meros)",
        "additionalFields": {}
      },
      "id": "send-scheduling-options",
      "name": "Enviar Op√ß√µes Agendamento",
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [1340, 100],
      "credentials": {
        "whatsAppBusinessCloud": {
          "id": "YOUR_WHATSAPP_CREDENTIAL_ID",
          "name": "WhatsApp Business Cloud"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "OK"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "phoneNumberId": "={{ $env.WHATSAPP_PHONE_ID }}",
        "to": "={{ $('Processar Mensagem').first().json.phone }}",
        "message": "Desculpe, n√£o consegui entender completamente. Por favor, reformule sua pergunta ou aguarde que um atendente humano entrar√° em contato em hor√°rio comercial. Agrade√ßo a sua compreens√£o.",
        "additionalFields": {}
      },
      "id": "send-human-fallback",
      "name": "Enviar Fallback Humano",
      "type": "n8n-nodes-base.whatsApp",
      "typeVersion": 1,
      "position": [1120, 500],
      "credentials": {
        "whatsAppBusinessCloud": {
          "id": "YOUR_WHATSAPP_CREDENTIAL_ID",
          "name": "WhatsApp Business Cloud"
        }
      }
    }
  ],
  "connections": {
    "WhatsApp Webhook": {
      "main": [
        [
          {
            "node": "Processar Mensagem",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Processar Mensagem": {
      "main": [
        [
          {
            "node": "ChatGPT An√°lise",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ChatGPT An√°lise": {
      "main": [
        [
          {
            "node": "Verificar Inten√ß√£o Agendamento",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Verificar Inten√ß√£o Desviar Humano",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Inten√ß√£o Agendamento": {
      "main": [
        [
          {
            "node": "Verificar Disponibilidade",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "else": [
        [
          {
            "node": "Enviar Resposta Geral",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Inten√ß√£o Desviar Humano": {
      "main": [
        [
          {
            "node": "Enviar Fallback Humano",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "else": [
        [
          null,
          {
            "node": "send-general-response",
            "type": "else",
            "index": 0
          }
        ]
      ]
    },
    "Verificar Disponibilidade": {
      "main": [
        [
          {
            "node": "Enviar Op√ß√µes Agendamento",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Resposta Geral": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Op√ß√µes Agendamento": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Fallback Humano": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  }
}