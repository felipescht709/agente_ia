generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model principal da Clínica/Cliente no modelo SaaS
model Clinica {
  id_clinica    Int      @id @default(autoincrement())
  nome_clinica  String
  telefone      String?
  email         String?
  cnpj          String?
  razao_social  String?
  cep           String?
  logradouro    String?
  numero        String?
  complemento   String?
  bairro        String?
  cidade        String?
  uf            String?
  codigo_ibge   String?
  plano         String   @default("BASICO") // Tipo de plano do cliente (BÁSICO, PREMIUM, etc.)
  ativo         Boolean  @default(true)
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt // Timestamp de última atualização

  usuarios                      Usuario[]
  profissionais                 ProfissionalDaSaude[]
  pacientes                     Paciente[]
  consultas                     Consulta[]
  procedimentos                 Procedimento[]
  agendas                       Agenda[]
  avaliacoes                    Avaliacao[]
  controle_operacional          ControleOperacional[]
  interacao_robo                InteracaoRobo[]
  convenios                     Convenio[]
  credenciais_clientes          CredenciaisCliente[] // Relacionamento para as credenciais de API de terceiros
  mapeamentos_status_consulta   MapeamentoStatusConsulta[] // Relacionamento para mapeamento de status
  mapeamentos_tipo_procedimento MapeamentoTipoProcedimento[] // Relacionamento para mapeamento de tipos de procedimento
}

// Enum para os tipos de usuário internos do sistema
enum TipoUsuario {
  ADMIN
  RECEPCIONISTA
  PROFISSIONAL
  SISTEMA_BOT // Tipo para ações realizadas por automações
}

model Usuario {
  id_usuario    Int         @id @default(autoincrement())
  nome          String
  email         String      @unique
  senha         String
  tipo          TipoUsuario // Usando enum TipoUsuario
  ativo         Boolean     @default(true)
  criado_em     DateTime    @default(now())
  atualizado_em DateTime    @updatedAt // Timestamp de última atualização

  id_clinica   Int
  clinica      Clinica              @relation(fields: [id_clinica], references: [id_clinica])
  profissional ProfissionalDaSaude? // Relacionamento opcional para profissional de saúde
}

model Paciente {
  id_paciente     Int      @id @default(autoincrement())
  cpf             String   @unique
  nome            String
  data_nascimento DateTime @db.Date // Mapeado para DATE no PostgreSQL
  email           String
  telefone        String
  codigo_ibge     String?
  cep             String?
  logradouro      String?
  numero          String?
  complemento     String?
  bairro          String?
  cidade          String?
  uf              String?
  senha           String?
  ativo           Boolean  @default(true)
  criado_em       DateTime @default(now())
  atualizado_em   DateTime @updatedAt // Timestamp de última atualização

  id_clinica     Int
  clinica        Clinica         @relation(fields: [id_clinica], references: [id_clinica])
  consultas      Consulta[]
  interacao_robo InteracaoRobo[]
}

model ProfissionalDaSaude {
  id_profissional_saude Int      @id @default(autoincrement())
  nome_profissional     String
  imagem_profissional   String?
  data_nascimento       DateTime @db.Date // Mapeado para DATE no PostgreSQL
  cpf                   String   @unique
  conselho              String?
  numero_conselho       String?
  uf_conselho           String?
  rqe                   String?
  telefone              String
  email                 String
  telemedicina          Boolean  @default(false)
  especialidade         String?
  ativo                 Boolean  @default(true)
  criado_em             DateTime @default(now())
  atualizado_em         DateTime @updatedAt // Timestamp de última atualização

  id_clinica Int
  clinica    Clinica    @relation(fields: [id_clinica], references: [id_clinica])
  usuario_id Int?       @unique // Opcional: um profissional pode ter um login de usuário
  usuario    Usuario?   @relation(fields: [usuario_id], references: [id_usuario])
  consultas  Consulta[]
  agenda     Agenda[]
}

// Enum para os status das consultas no SEU sistema (valores padronizados internamente)
enum StatusConsultaInterno {
  AGENDADA
  CONFIRMADA
  CANCELADA
  REALIZADA
  NAO_COMPARECEU
  PENDENTE_CONFIRMACAO
  REAGENDADA
  FINALIZADA_SEM_ATENDIMENTO // Ex: Paciente faltou, mas a consulta foi encerrada no sistema
}

// Enum para as origens de agendamento
enum OrigemAgendamento {
  MANUAL
  WHATSAPP_BOT
  WEB_PORTAL
  APP_MOBILE
}

model Consulta {
  id_consulta        Int                   @id @default(autoincrement())
  data_hora_inicio   DateTime
  data_hora_fim      DateTime?
  valor              Decimal?              @db.Decimal(10, 2) // Usando Decimal para precisão monetária
  telemedicina       Boolean               @default(false)
  status             StatusConsultaInterno // Usando enum interno, mapeado externamente via tabela
  observacoes        String?
  origem_agendamento OrigemAgendamento     @default(MANUAL) // Rastreia a origem do agendamento
  criado_em          DateTime              @default(now())
  atualizado_em      DateTime              @updatedAt // Timestamp de última atualização

  paciente_id     Int
  profissional_id Int
  id_clinica      Int
  id_convenio     Int?

  clinica       Clinica                @relation(fields: [id_clinica], references: [id_clinica])
  paciente      Paciente               @relation(fields: [paciente_id], references: [id_paciente])
  profissional  ProfissionalDaSaude    @relation(fields: [profissional_id], references: [id_profissional_saude])
  procedimentos ConsultaProcedimento[]
  avaliacoes    Avaliacao[]
  convenio      Convenio?              @relation(fields: [id_convenio], references: [id_convenio])
}

model Avaliacao {
  id_avaliacao         Int      @id @default(autoincrement())
  consulta_id          Int
  data_avaliacao       DateTime
  nota_satisfacao      Int? // Nota da pesquisa de satisfação (ex: 0-10)
  recomendaria_clinica Boolean? // Se o paciente recomendaria a clínica
  comentario           String? // Comentários adicionais do paciente
  parecer_profissional String? // Parecer/resposta do profissional, se houver
  id_clinica           Int
  criado_em            DateTime @default(now())
  atualizado_em        DateTime @updatedAt // Timestamp de última atualização

  clinica  Clinica  @relation(fields: [id_clinica], references: [id_clinica])
  consulta Consulta @relation(fields: [consulta_id], references: [id_consulta])
}

// Enum para os tipos de procedimento no SEU sistema
enum TipoProcedimentoInterno {
  CONSULTA
  EXAME
  TERAPIA
  VACINA
  RETORNO
  OUTRO
}

model Procedimento {
  id_procedimento   Int                     @id @default(autoincrement())
  nome_procedimento String
  tipo              TipoProcedimentoInterno // Usando enum interno, mapeado externamente via tabela
  valor             Decimal                 @db.Decimal(10, 2) // Usando Decimal
  duracao_minutos   Int
  telemedicina      Boolean                 @default(false)
  descricao         String?
  ativo             Boolean                 @default(true)
  criado_em         DateTime                @default(now())
  atualizado_em     DateTime                @updatedAt // Timestamp de última atualização

  id_clinica Int
  clinica    Clinica                @relation(fields: [id_clinica], references: [id_clinica])
  consultas  ConsultaProcedimento[]

  @@unique([id_clinica, nome_procedimento]) // Garante unicidade de procedimento por clínica
}

model ConsultaProcedimento {
  consulta_id     Int
  procedimento_id Int

  consulta     Consulta     @relation(fields: [consulta_id], references: [id_consulta])
  procedimento Procedimento @relation(fields: [procedimento_id], references: [id_procedimento])

  @@id([consulta_id, procedimento_id])
}

// Enum para os status da agenda (internos)
enum StatusAgenda {
  DISPONIVEL
  INDISPONIVEL // Para bloqueios genéricos
  AGENDADO // Quando um slot é ocupado por uma consulta
}

// Enum para os tipos de bloqueio na agenda
enum TipoBloqueioAgenda {
  FERIAS
  FERIADO
  ALMOCO
  EVENTO
  BLOQUEIO_PESSOAL // Ex: para estudo, administrativo
  OUTRO
}

model Agenda {
  id_agenda     Int                 @id @default(autoincrement())
  data          DateTime            @db.Date // Mapeado para DATE no PostgreSQL
  hora_inicio   DateTime            @db.Time(0) // Mapeado para TIME no PostgreSQL
  hora_fim      DateTime            @db.Time(0) // Mapeado para TIME no PostgreSQL
  status        StatusAgenda // Usando enum StatusAgenda
  tipo_bloqueio TipoBloqueioAgenda? // Usando enum TipoBloqueioAgenda para bloqueios
  criado_em     DateTime            @default(now())
  atualizado_em DateTime            @updatedAt // Timestamp de última atualização

  profissional_id Int
  id_clinica      Int

  clinica      Clinica             @relation(fields: [id_clinica], references: [id_clinica])
  profissional ProfissionalDaSaude @relation(fields: [profissional_id], references: [id_profissional_saude])
}

model ControleOperacional {
  id_controle     Int      @id @default(autoincrement())
  id_clinica      Int
  data_referencia DateTime @default(now()) // por dia, semana ou mês
  criado_em       DateTime @default(now())
  atualizado_em   DateTime @updatedAt // Timestamp de última atualização

  pacientes_agendados     Int @default(0)
  pacientes_nao_agendados Int @default(0) // Pacientes que buscaram mas não agendaram
  pacientes_faltantes     Int @default(0) // Pacientes com consulta marcada que faltaram

  nps                 Float? // Nota média da pesquisa de satisfação (Float ou Decimal, dependendo da granularidade)
  total_consultas     Int     @default(0)
  total_procedimentos Int     @default(0)
  valor_arrecadado    Decimal @default(0) @db.Decimal(10, 2) // Usando Decimal

  horas_robo_trabalhadas Float   @default(0) // Horas de trabalho do robô (em horas)
  economia_estimada      Decimal @default(0) @db.Decimal(10, 2) // Economia estimada em reais, usando Decimal

  clinica Clinica @relation(fields: [id_clinica], references: [id_clinica])
}

// Enum para os tipos de interação do robô (mais detalhado)
enum TipoInteracaoRobo {
  DUVIDA_GERAL
  SOLICITACAO_AGENDAMENTO_INICIAL
  CONFIRMACAO_AGENDAMENTO_PACIENTE
  CANCELAMENTO_AGENDAMENTO_PACIENTE
  REAGENDAMENTO_SOLICITADO_PACIENTE
  PESQUISA_SATISFACAO_ENVIADA
  PESQUISA_SATISFACAO_RESPONDIDA
  NOTIFICACAO_LEMBRETE
  NOTIFICACAO_ALTERACAO
  FALLBACK_PARA_HUMANO
  INFO_SOBRE_PROCEDIMENTO
  INFO_SOBRE_CONVENIO
  ERRO_PROCESSAMENTO
}

model InteracaoRobo {
  id_interacao         Int               @id @default(autoincrement())
  id_clinica           Int
  id_paciente          Int
  tipo                 TipoInteracaoRobo // Usando enum TipoInteracaoRobo
  data_interacao       DateTime          @default(now())
  mensagem_recebida    String? // Texto original da mensagem do paciente
  resposta_enviada     String? // Texto da resposta enviada pelo bot
  intencao_detectada   String? // Intenção detectada pela IA (ex: "AGENDAR_CONSULTA")
  status_processamento String? // Status do processamento da interação (SUCESSO, FALHA, DESVIO_HUMANO, AGUARDANDO_RESPOSTA)
  detalhes_erro        String? // Detalhes do erro, se houver
  id_convenio          Int? // Opcional: Se a interação for sobre um convênio específico
  criado_em            DateTime          @default(now())
  atualizado_em        DateTime          @updatedAt // Timestamp de última atualização

  paciente Paciente  @relation(fields: [id_paciente], references: [id_paciente])
  clinica  Clinica   @relation(fields: [id_clinica], references: [id_clinica])
  convenio Convenio? @relation(fields: [id_convenio], references: [id_convenio])
}

model Convenio {
  id_convenio   Int      @id @default(autoincrement())
  nome          String
  ativo         Boolean  @default(true)
  id_clinica    Int
  criado_em     DateTime @default(now())
  atualizado_em DateTime @updatedAt // Timestamp de última atualização

  clinica         Clinica         @relation(fields: [id_clinica], references: [id_clinica])
  consultas       Consulta[]
  interacoes_robo InteracaoRobo[]
}

// Enum para os tipos de serviço externos que o SaaS pode integrar
enum TipoCredencialServico {
  WHATSAPP_BUSINESS_API // Para API oficial do Meta
  ZAPI_API // Para Z-API ou outros gateways de WhatsApp
  OPENAI_API // Para OpenAI (ChatGPT)
  OLLAMA_API // Para Ollama (modelos locais)
  AMPLIMED_API
  ICLINIC_API
  FEEGOW_API
  CRM_INTEGRATION_API
  EHR_INTEGRATION_API
  GATEWAY_SMS
  GOOGLE_CALENDAR_API
}

// Model para armazenar as credenciais de API externas por clínica
model CredenciaisCliente {
  id_credencial_cliente Int                   @id @default(autoincrement())
  id_clinica            Int
  tipo_servico          TipoCredencialServico // Usando enum TipoCredencialServico para identificar o tipo
  chave_api             String // A chave API, token, ou ID principal
  secret_key            String? // Chave secreta, se houver (para OAuth ou outros)
  phone_number_id       String? // Específico para WhatsApp Business API
  instance_url          String? // URL da instância (para Z-API, Ollama, ou outros gateways)
  webhook_token         String? // Token de verificação de webhook (se o serviço externo precisar enviar para o seu backend)
  configuracao_extra    Json? // Campo JSON para configurações flexíveis por serviço
  criado_em             DateTime              @default(now())
  atualizado_em         DateTime              @updatedAt
  ativo                 Boolean               @default(true)

  clinica Clinica @relation(fields: [id_clinica], references: [id_clinica])

  @@unique([id_clinica, tipo_servico]) // Garante apenas uma credencial de um tipo específico por clínica
}

// NOVA MODEL: Para mapear status de consulta entre sistemas
model MapeamentoStatusConsulta {
  id_mapeamento_status Int                   @id @default(autoincrement())
  id_clinica           Int
  sistema_externo      String // Ex: "AMPLIMED", "ICLINIC", "FEEGOW", "SEU_SISTEMA_INTERNO"
  valor_externo        String // O status como ele vem ou vai para o sistema externo (ex: "SCHEDULED", "CANCELED_BY_PATIENT", "FINISHED")
  valor_interno        StatusConsultaInterno // O status correspondente no seu enum interno StatusConsultaInterno
  ativo                Boolean               @default(true)
  criado_em            DateTime              @default(now())
  atualizado_em        DateTime              @updatedAt

  clinica Clinica @relation(fields: [id_clinica], references: [id_clinica])

  @@unique([id_clinica, sistema_externo, valor_externo]) // Garante mapeamento único por cliente/sistema/valor externo
}

// NOVA MODEL: Para mapear tipos de procedimento entre sistemas
model MapeamentoTipoProcedimento {
  id_mapeamento_tipo Int                     @id @default(autoincrement())
  id_clinica         Int
  sistema_externo    String // Ex: "AMPLIMED", "ICLINIC", "FEEGOW", "SEU_SISTEMA_INTERNO"
  valor_externo      String // O tipo como ele vem ou vai para o sistema externo (ex: "Consulta Med", "Exame Lab", "Fisioterapia")
  valor_interno      TipoProcedimentoInterno // O tipo correspondente no seu enum interno TipoProcedimentoInterno
  ativo              Boolean                 @default(true)
  criado_em          DateTime                @default(now())
  atualizado_em      DateTime                @updatedAt

  clinica Clinica @relation(fields: [id_clinica], references: [id_clinica])

  @@unique([id_clinica, sistema_externo, valor_externo]) // Garante mapeamento único por cliente/sistema/valor externo
}
