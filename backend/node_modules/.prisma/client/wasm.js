
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClinicaScalarFieldEnum = {
  id_clinica: 'id_clinica',
  nome_clinica: 'nome_clinica',
  telefone: 'telefone',
  email: 'email',
  cnpj: 'cnpj',
  razao_social: 'razao_social',
  cep: 'cep',
  logradouro: 'logradouro',
  numero: 'numero',
  complemento: 'complemento',
  bairro: 'bairro',
  cidade: 'cidade',
  uf: 'uf',
  codigo_ibge: 'codigo_ibge',
  plano: 'plano',
  ativo: 'ativo',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em'
};

exports.Prisma.UsuarioScalarFieldEnum = {
  id_usuario: 'id_usuario',
  nome: 'nome',
  email: 'email',
  senha: 'senha',
  tipo: 'tipo',
  ativo: 'ativo',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em',
  id_clinica: 'id_clinica'
};

exports.Prisma.PacienteScalarFieldEnum = {
  id_paciente: 'id_paciente',
  cpf: 'cpf',
  nome: 'nome',
  data_nascimento: 'data_nascimento',
  email: 'email',
  telefone: 'telefone',
  codigo_ibge: 'codigo_ibge',
  cep: 'cep',
  logradouro: 'logradouro',
  numero: 'numero',
  complemento: 'complemento',
  bairro: 'bairro',
  cidade: 'cidade',
  uf: 'uf',
  senha: 'senha',
  ativo: 'ativo',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em',
  id_clinica: 'id_clinica'
};

exports.Prisma.ProfissionalDaSaudeScalarFieldEnum = {
  id_profissional_saude: 'id_profissional_saude',
  nome_profissional: 'nome_profissional',
  imagem_profissional: 'imagem_profissional',
  data_nascimento: 'data_nascimento',
  cpf: 'cpf',
  conselho: 'conselho',
  numero_conselho: 'numero_conselho',
  uf_conselho: 'uf_conselho',
  rqe: 'rqe',
  telefone: 'telefone',
  email: 'email',
  telemedicina: 'telemedicina',
  especialidade: 'especialidade',
  ativo: 'ativo',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em',
  id_clinica: 'id_clinica',
  usuario_id: 'usuario_id'
};

exports.Prisma.ConsultaScalarFieldEnum = {
  id_consulta: 'id_consulta',
  data_hora_inicio: 'data_hora_inicio',
  data_hora_fim: 'data_hora_fim',
  valor: 'valor',
  telemedicina: 'telemedicina',
  status: 'status',
  observacoes: 'observacoes',
  origem_agendamento: 'origem_agendamento',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em',
  paciente_id: 'paciente_id',
  profissional_id: 'profissional_id',
  id_clinica: 'id_clinica',
  id_convenio: 'id_convenio'
};

exports.Prisma.AvaliacaoScalarFieldEnum = {
  id_avaliacao: 'id_avaliacao',
  consulta_id: 'consulta_id',
  data_avaliacao: 'data_avaliacao',
  nota_satisfacao: 'nota_satisfacao',
  recomendaria_clinica: 'recomendaria_clinica',
  comentario: 'comentario',
  parecer_profissional: 'parecer_profissional',
  id_clinica: 'id_clinica',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em'
};

exports.Prisma.ProcedimentoScalarFieldEnum = {
  id_procedimento: 'id_procedimento',
  nome_procedimento: 'nome_procedimento',
  tipo: 'tipo',
  valor: 'valor',
  duracao_minutos: 'duracao_minutos',
  telemedicina: 'telemedicina',
  descricao: 'descricao',
  ativo: 'ativo',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em',
  id_clinica: 'id_clinica'
};

exports.Prisma.ConsultaProcedimentoScalarFieldEnum = {
  consulta_id: 'consulta_id',
  procedimento_id: 'procedimento_id'
};

exports.Prisma.AgendaScalarFieldEnum = {
  id_agenda: 'id_agenda',
  data: 'data',
  hora_inicio: 'hora_inicio',
  hora_fim: 'hora_fim',
  status: 'status',
  tipo_bloqueio: 'tipo_bloqueio',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em',
  profissional_id: 'profissional_id',
  id_clinica: 'id_clinica'
};

exports.Prisma.ControleOperacionalScalarFieldEnum = {
  id_controle: 'id_controle',
  id_clinica: 'id_clinica',
  data_referencia: 'data_referencia',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em',
  pacientes_agendados: 'pacientes_agendados',
  pacientes_nao_agendados: 'pacientes_nao_agendados',
  pacientes_faltantes: 'pacientes_faltantes',
  nps: 'nps',
  total_consultas: 'total_consultas',
  total_procedimentos: 'total_procedimentos',
  valor_arrecadado: 'valor_arrecadado',
  horas_robo_trabalhadas: 'horas_robo_trabalhadas',
  economia_estimada: 'economia_estimada'
};

exports.Prisma.InteracaoRoboScalarFieldEnum = {
  id_interacao: 'id_interacao',
  id_clinica: 'id_clinica',
  id_paciente: 'id_paciente',
  tipo: 'tipo',
  data_interacao: 'data_interacao',
  mensagem_recebida: 'mensagem_recebida',
  resposta_enviada: 'resposta_enviada',
  intencao_detectada: 'intencao_detectada',
  status_processamento: 'status_processamento',
  detalhes_erro: 'detalhes_erro',
  id_convenio: 'id_convenio',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em'
};

exports.Prisma.ConvenioScalarFieldEnum = {
  id_convenio: 'id_convenio',
  nome: 'nome',
  ativo: 'ativo',
  id_clinica: 'id_clinica',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em'
};

exports.Prisma.CredenciaisClienteScalarFieldEnum = {
  id_credencial_cliente: 'id_credencial_cliente',
  id_clinica: 'id_clinica',
  tipo_servico: 'tipo_servico',
  chave_api: 'chave_api',
  secret_key: 'secret_key',
  phone_number_id: 'phone_number_id',
  instance_url: 'instance_url',
  webhook_token: 'webhook_token',
  configuracao_extra: 'configuracao_extra',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em',
  ativo: 'ativo'
};

exports.Prisma.MapeamentoStatusConsultaScalarFieldEnum = {
  id_mapeamento_status: 'id_mapeamento_status',
  id_clinica: 'id_clinica',
  sistema_externo: 'sistema_externo',
  valor_externo: 'valor_externo',
  valor_interno: 'valor_interno',
  ativo: 'ativo',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em'
};

exports.Prisma.MapeamentoTipoProcedimentoScalarFieldEnum = {
  id_mapeamento_tipo: 'id_mapeamento_tipo',
  id_clinica: 'id_clinica',
  sistema_externo: 'sistema_externo',
  valor_externo: 'valor_externo',
  valor_interno: 'valor_interno',
  ativo: 'ativo',
  criado_em: 'criado_em',
  atualizado_em: 'atualizado_em'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.TipoUsuario = exports.$Enums.TipoUsuario = {
  ADMIN: 'ADMIN',
  RECEPCIONISTA: 'RECEPCIONISTA',
  PROFISSIONAL: 'PROFISSIONAL',
  SISTEMA_BOT: 'SISTEMA_BOT'
};

exports.StatusConsultaInterno = exports.$Enums.StatusConsultaInterno = {
  AGENDADA: 'AGENDADA',
  CONFIRMADA: 'CONFIRMADA',
  CANCELADA: 'CANCELADA',
  REALIZADA: 'REALIZADA',
  NAO_COMPARECEU: 'NAO_COMPARECEU',
  PENDENTE_CONFIRMACAO: 'PENDENTE_CONFIRMACAO',
  REAGENDADA: 'REAGENDADA',
  FINALIZADA_SEM_ATENDIMENTO: 'FINALIZADA_SEM_ATENDIMENTO'
};

exports.OrigemAgendamento = exports.$Enums.OrigemAgendamento = {
  MANUAL: 'MANUAL',
  WHATSAPP_BOT: 'WHATSAPP_BOT',
  WEB_PORTAL: 'WEB_PORTAL',
  APP_MOBILE: 'APP_MOBILE'
};

exports.TipoProcedimentoInterno = exports.$Enums.TipoProcedimentoInterno = {
  CONSULTA: 'CONSULTA',
  EXAME: 'EXAME',
  TERAPIA: 'TERAPIA',
  VACINA: 'VACINA',
  RETORNO: 'RETORNO',
  OUTRO: 'OUTRO'
};

exports.StatusAgenda = exports.$Enums.StatusAgenda = {
  DISPONIVEL: 'DISPONIVEL',
  INDISPONIVEL: 'INDISPONIVEL',
  AGENDADO: 'AGENDADO'
};

exports.TipoBloqueioAgenda = exports.$Enums.TipoBloqueioAgenda = {
  FERIAS: 'FERIAS',
  FERIADO: 'FERIADO',
  ALMOCO: 'ALMOCO',
  EVENTO: 'EVENTO',
  BLOQUEIO_PESSOAL: 'BLOQUEIO_PESSOAL',
  OUTRO: 'OUTRO'
};

exports.TipoInteracaoRobo = exports.$Enums.TipoInteracaoRobo = {
  DUVIDA_GERAL: 'DUVIDA_GERAL',
  SOLICITACAO_AGENDAMENTO_INICIAL: 'SOLICITACAO_AGENDAMENTO_INICIAL',
  CONFIRMACAO_AGENDAMENTO_PACIENTE: 'CONFIRMACAO_AGENDAMENTO_PACIENTE',
  CANCELAMENTO_AGENDAMENTO_PACIENTE: 'CANCELAMENTO_AGENDAMENTO_PACIENTE',
  REAGENDAMENTO_SOLICITADO_PACIENTE: 'REAGENDAMENTO_SOLICITADO_PACIENTE',
  PESQUISA_SATISFACAO_ENVIADA: 'PESQUISA_SATISFACAO_ENVIADA',
  PESQUISA_SATISFACAO_RESPONDIDA: 'PESQUISA_SATISFACAO_RESPONDIDA',
  NOTIFICACAO_LEMBRETE: 'NOTIFICACAO_LEMBRETE',
  NOTIFICACAO_ALTERACAO: 'NOTIFICACAO_ALTERACAO',
  FALLBACK_PARA_HUMANO: 'FALLBACK_PARA_HUMANO',
  INFO_SOBRE_PROCEDIMENTO: 'INFO_SOBRE_PROCEDIMENTO',
  INFO_SOBRE_CONVENIO: 'INFO_SOBRE_CONVENIO',
  ERRO_PROCESSAMENTO: 'ERRO_PROCESSAMENTO'
};

exports.TipoCredencialServico = exports.$Enums.TipoCredencialServico = {
  WHATSAPP_BUSINESS_API: 'WHATSAPP_BUSINESS_API',
  ZAPI_API: 'ZAPI_API',
  OPENAI_API: 'OPENAI_API',
  OLLAMA_API: 'OLLAMA_API',
  AMPLIMED_API: 'AMPLIMED_API',
  ICLINIC_API: 'ICLINIC_API',
  FEEGOW_API: 'FEEGOW_API',
  CRM_INTEGRATION_API: 'CRM_INTEGRATION_API',
  EHR_INTEGRATION_API: 'EHR_INTEGRATION_API',
  GATEWAY_SMS: 'GATEWAY_SMS',
  GOOGLE_CALENDAR_API: 'GOOGLE_CALENDAR_API'
};

exports.Prisma.ModelName = {
  Clinica: 'Clinica',
  Usuario: 'Usuario',
  Paciente: 'Paciente',
  ProfissionalDaSaude: 'ProfissionalDaSaude',
  Consulta: 'Consulta',
  Avaliacao: 'Avaliacao',
  Procedimento: 'Procedimento',
  ConsultaProcedimento: 'ConsultaProcedimento',
  Agenda: 'Agenda',
  ControleOperacional: 'ControleOperacional',
  InteracaoRobo: 'InteracaoRobo',
  Convenio: 'Convenio',
  CredenciaisCliente: 'CredenciaisCliente',
  MapeamentoStatusConsulta: 'MapeamentoStatusConsulta',
  MapeamentoTipoProcedimento: 'MapeamentoTipoProcedimento'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
